If query #10 returns nothing, then find the course sets with the minimum number of courses that their combination covers the given skill set. The considered course sets will not include more than three courses. **WARNING: This takes about 2 minutes to execute.**
!!!
WITH base AS (
SELECT RowNum AS gid, CASE WHEN c1.course_code = c2.course_code THEN 1 ELSE CASE WHEN c2.course_code = c3.course_code THEN 2 ELSE 3 END END AS course_count, c1.course_code AS cc1, c2.course_code AS cc2, c3.course_code AS cc3
FROM course c1, course c2, course c3
WHERE (c1.course_code = c2.course_code AND c2.course_code = c3.course_code)
OR (c1.course_code < c2.course_code AND c2.course_code = c3.course_code)
OR (c1.course_code < c2.course_code AND c2.course_code < c3.course_code)
),
formatted AS (
SELECT gid, course_count, cc1 AS course_code, ks_code
FROM base LEFT OUTER JOIN course_ks cks ON base.cc1 = cks.course_code
UNION
SELECT gid, course_count, cc2 AS course_code, ks_code
FROM base LEFT OUTER JOIN course_ks cks ON base.cc2 = cks.course_code
UNION
SELECT gid, course_count, cc3 AS course_code, ks_code
FROM base LEFT OUTER JOIN course_ks cks ON base.cc3 = cks.course_code
),
matches AS (
SELECT DISTINCT gid, course_count, course_code
FROM formatted f1
WHERE NOT EXISTS 
(
SELECT ks_code FROM jp_ks WHERE job_code = ?
MINUS
SELECT ks_code FROM formatted f2 WHERE f1.gid = f2.gid
))
SELECT matches.gid, matches.course_code, course.title
FROM matches
LEFT OUTER JOIN course ON matches.course_code = course.course_code
WHERE matches.course_count = (SELECT MIN(course_count) FROM matches)
!!!
1
!!!
1
!!!
Choose a job_code:
!!!
select job_code from jp_ks
!!!
1
!!!